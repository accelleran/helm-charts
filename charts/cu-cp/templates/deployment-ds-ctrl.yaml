{{- include
      "accelleran.common.deployment"
      (fromYaml (include "accelleran.cu-cp.ds-ctrl.deployment.args" $))
-}}

{{- define "accelleran.cu-cp.ds-ctrl.deployment.args" -}}
{{- $ := . -}}
{{- $values := index $.Values "ds-ctrl" -}}

top:
  {{ $ | toYaml | nindent 2 }}
values:
  {{
    (mergeOverwrite
      (deepCopy $values)
      (dict "replicaCount" (include "accelleran.cu-cp.ds-ctrl.replicaCount" $))
    ) | toYaml | nindent 2
  }}

volumes:
{{- range $index, $ordinal := until ($values.autoscaling.factorReplicas | int) }}
  - name: {{ printf "config-%d" $ordinal | quote }}
    emptyDir: {}
{{- end }}

initContainers:
- {{ fromYaml (include "accelleran.common.init.redis" (fromYaml (include "accelleran.cu-cp.init.args" .))) | toYaml | nindent 2 }}
- {{ fromYaml (include "accelleran.common.init.nats" (fromYaml (include "accelleran.cu-cp.init.args" .))) | toYaml | nindent 2 }}
- {{ include "accelleran.cu-cp.ds-ctrl.init.container" $ | nindent 2 }}

containers:
{{- range $index, $ordinal := until ($values.autoscaling.factorReplicas | int) }}
- {{ fromYaml (include "accelleran.cu-cp.ds-ctrl.container" (list $ $ordinal)) | toYaml | nindent 2 }}
{{- end }}
{{- end -}}


{{- define "accelleran.cu-cp.ds-ctrl.replicaCount" -}}
{{- $values := index $.Values "ds-ctrl" -}}

{{- $replicaCount := $values.replicaCount -}}

{{- if not $replicaCount -}}
{{- $ueCount := include "accelleran.cu-cp.ueCount" $ | int -}}
{{- $factorReplicas := $values.autoscaling.factorReplicas | int -}}

{{- if lt $ueCount 1 -}}
{{- required (printf "The number of UEs must be at least 1 (got: %d)" $ueCount) nil -}}
{{- end -}}
{{- if lt $factorReplicas 1 -}}
{{- required (printf "The replica factor must be at least 1 (got: %d)" $factorReplicas) nil -}}
{{- end -}}

{{- $replicaCount = divf $ueCount $factorReplicas | ceil -}}
{{- end -}}

{{- $replicaCount -}}
{{- end -}}


{{- define "accelleran.cu-cp.ds-ctrl.init.container" -}}
{{- include
      "accelleran.common.init.container"
      (fromYaml (include "accelleran.cu-cp.ds-ctrl.init.container.args" .))
-}}
{{- end -}}


{{- define "accelleran.cu-cp.ds-ctrl.init.container.args" -}}
{{- $ := . -}}
{{- $values := index $.Values "ds-ctrl" -}}
{{- $image := $values.envInitImage | required "The env init image needs to be provided to cu-cp ds-ctrl args" -}}

top:
  {{ $ | toYaml | nindent 2 }}
values:
  {{
    (mergeOverwrite
      (deepCopy $values)
      (dict "image" $image)
    ) | toYaml | nindent 2
  }}

name: {{ printf "%s-app-ids" $values.containerName | quote }}
command:
- "/bin/sh"
- "-c"
- |
  /bin/sh <<'EOF'
  #!/bin/sh

{{- range $index, $ordinal := until ($values.autoscaling.factorReplicas | int) }}
  app_id=${POD_NAME}-{{ $ordinal }}
  echo "__APPID=${app_id}" >> /config-{{ $ordinal }}/env
{{- end }}
  EOF

env:
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
volumeMounts:
{{- range $index, $ordinal := until ($values.autoscaling.factorReplicas | int) }}
- name: {{ printf "config-%d" $ordinal | quote }}
  mountPath: {{ printf "/config-%d" $ordinal | quote }}
{{- end }}
{{- end -}}


{{- define "accelleran.cu-cp.ds-ctrl.container" -}}
{{- include
      "accelleran.common.container"
      (fromYaml (include "accelleran.cu-cp.ds-ctrl.container.args" .))
-}}
{{- end -}}


{{- define "accelleran.cu-cp.ds-ctrl.container.args" -}}
{{- $ := first . -}}
{{- $values := index $.Values "ds-ctrl" -}}
{{- $ordinal := index . 1 -}}

top:
  {{ $ | toYaml | nindent 2 }}
values:
  {{
    (mergeOverwrite
      (deepCopy $values)
      (dict "containerName" (printf "%s-%d" $values.containerName $ordinal))
    ) | toYaml | nindent 2
  }}

env:
  - name: __APPNAME
    value: dsController
{{- with (include "accelleran.common.bootstrap.instanceId" (dict "top" $)) }}
  - name: INSTANCE_FILTER
    value: {{ . | quote }}
{{- end }}
envFrom:
  - configMapRef:
      name: {{ include "accelleran.common.bootstrap.configMapName" (dict "top" $) | quote }}

volumeMounts:
- name: {{ printf "config-%d" $ordinal | quote }}
  mountPath: /config
{{- end -}}
