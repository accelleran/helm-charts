global:

  # Number of supported components
  #   Description:  You have to specify the amount of different components that should be supported.
  #                 Therefore, you have to specify:
  #                 - the number of AMFs that will be used
  #                 - the number of CU-UPs that will be used
  #                 - the number of DUs that will be used
  #                 - the number of CELLSs that will be used
  #                   i.e. DU1 supporting 3 cells and DU2 supported 2 cells => numOfCells: 5
  #                 - the number of UEs that will be used
  numOfAmfs: 1
  numOfCuUps: 1
  numOfDus: 3
  numOfCells: 3
  numOfUes: 16

  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

  bootstrap:
    create: true
    configMapName: ""

    # CU-CP Instance ID
    #   Description:  The Instance ID of the CU-CP component that
    #                 will be used in the bootstrap file.
    #                 The Instance ID must consist of lower case alphanumeric characters
    #                 or '-', start with an alphabetic character, and end with an alphanumeric
    #                 character (e.g. 'my-name',  or 'abc-123', regex used for validation is
    #                 '^[a-z0-9-]+$'). The Instance ID also cannot be longer than 19 characters!
    #
    #   Example:
    # instanceId: "cucp-1"
    #
    instanceId: "cucp-1"

    redis:
      hostname: "ric-redis-5g"
      port: "6379"

    nats:
      hostname: "ric-nats-5g"
      port: "4222"

  drax:
    technology: "5g"
    role: "5g"

  # dRAX Specific Node Selector
  #   Description: This is a special nodeSelector field implemented for the
  #                Accelleran 5G Helm charts. You need to first label your
  #                node in Kubernetes with a label "draxName" and give it a
  #                <value>. For example for node <node_name>, you can use the
  #                following command to label it:
  #                kubectl label node <node_name> draxName=<value>.
  #                Then in "draxName" set the value of the label you chose for
  #                the node. This will in effect install all the 5G Application
  #                on that node, without the need to edit all individual helm
  #                charts. In case you want to add other nodeSelector options,
  #                you have to add them to the helm chart specific values files.
  #   Value type: bool
  #   Example:
  #
  draxNodeSelectorEnabled: false
  draxNodeSelector:
    draxName: "main"


cu-cp:
  enabled: true
  
  nameOverride: "cu-cp"
  fullnameOverride: ""

  initImage:
    repository: accelleran/acc-generic-img
    tag: "latest"
    pullPolicy: IfNotPresent

  imagePullSecrets:
    - name: accelleran-secret

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext: {}
    # fsGroup: 2000

  draxNodeSelectorEnabled: false
  draxNodeSelector:
    draxName: "{{ $.Values.global.draxNodeSelector.draxName }}"

  nodeSelector: {}

  tolerations: []

  affinity: {}


netconf:
  enabled: true

  nameOverride: "netconf"
  fullnameOverride: ""

  containerName: "netconf"

  image:
    repository: accelleran/cucp-netconf
    tag: ""
    pullPolicy: IfNotPresent

  readinessProbe:
    exec:
      command:
        - "test"
        - "-f"
        - "/ready"
    initialDelaySeconds: 15
    periodSeconds: 30

  service:
    enabled: true
    name: ""
    type: "NodePort"
    portName: "netconf"
    protocol: "TCP"
    port: 8300
    targetPort: null
    nodePort: null


gnb-controller:
  enabled: true

  nameOverride: "gnb-controller"
  fullnameOverride: ""

  containerName: "gnb-controller"

  image:
    repository: accelleran/gnbcontrollerappl
    tag: ""
    pullPolicy: IfNotPresent


amf-controller:
  enabled: true

  nameOverride: "amf-controller"
  fullnameOverride: ""

  containerName: "amf-controller"

  image:
    repository: accelleran/amfcontrollerappl
    tag: ""
    pullPolicy: IfNotPresent


cu-up-controller:
  enabled: true

  nameOverride: "cu-up-controller"
  fullnameOverride: ""

  containerName: "cu-up-controller"

  image:
    repository: accelleran/cuupcontrollerappl
    tag: ""
    pullPolicy: IfNotPresent


du-controller:
  enabled: true

  nameOverride: "du-controller"
  fullnameOverride: ""

  containerName: "du-controller"

  image:
    repository: accelleran/ducontrollerappl
    tag: ""
    pullPolicy: IfNotPresent


pm-controller:
  enabled: true

  nameOverride: "pm-controller"
  fullnameOverride: ""

  containerName: "pm-controller"

  image:
    repository: accelleran/pmcontrollerappl
    tag: ""
    pullPolicy: IfNotPresent


res-mgr:
  enabled: true

  nameOverride: "res-mgr"
  fullnameOverride: ""

  containerName: "res-mgr"

  image:
    repository: accelleran/resmgrappl
    tag: ""
    pullPolicy: IfNotPresent


sctp-ng:
  enabled: true

  nameOverride: "sctp-ng"
  fullnameOverride: ""

  containerName: "sctp-ng"

  image:
    repository: accelleran/sctpcpngappl
    tag: ""
    pullPolicy: IfNotPresent


sctp-e1:
  enabled: true

  nameOverride: "sctp-e1"
  fullnameOverride: ""

  containerName: "sctp-e1"

  image:
    repository: accelleran/sctpcpe1appl
    tag: ""
    pullPolicy: IfNotPresent

  service:
    enabled: true
    name: ""
    type: "LoadBalancer"
    portName: "e1"
    protocol: "SCTP"
    port: 38462
    targetPort: 0
    nodePort: 0
    loadBalancerIP: ""
    externalTrafficPolicy: "Local"


sctp-f1:
  enabled: true

  nameOverride: "sctp-f1"
  fullnameOverride: ""

  containerName: "sctp-f1"

  image:
    repository: accelleran/sctpcpf1appl
    tag: ""
    pullPolicy: IfNotPresent

  service:
    enabled: true
    name: ""
    type: "LoadBalancer"
    portName: "f1"
    protocol: "SCTP"
    port: 38472
    targetPort: 0
    nodePort: 0
    loadBalancerIP: ""
    externalTrafficPolicy: "Local"


ng-ap:
  enabled: true

  nameOverride: "ng-ap"
  fullnameOverride: ""

  containerName: "ng-ap"

  replicaCount: null

  image:
    repository: accelleran/ngapappl
    tag: ""
    pullPolicy: IfNotPresent

  imagePullSecrets:
    - name: accelleran-secret

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext: {}
    # fsGroup: 2000

  draxNodeSelectorEnabled: false
  draxNodeSelector:
    draxName: "{{ $.Values.global.draxNodeSelector.draxName }}"

  nodeSelector: {}

  tolerations: []

  affinity: {}


e1-cp:
  enabled: true

  nameOverride: "e1-cp"
  fullnameOverride: ""

  containerName: "e1-cp"

  replicaCount: null

  image:
    repository: accelleran/e1cpappl
    tag: ""
    pullPolicy: IfNotPresent
  
  imagePullSecrets:
    - name: accelleran-secret

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext: {}
    # fsGroup: 2000

  draxNodeSelectorEnabled: false
  draxNodeSelector:
    draxName: "{{ $.Values.global.draxNodeSelector.draxName }}"

  nodeSelector: {}

  tolerations: []

  affinity: {}


f1-ap:
  enabled: true

  nameOverride: "f1-ap"
  fullnameOverride: ""

  containerName: "f1-ap"

  replicaCount: null

  image:
    repository: accelleran/f1apappl
    tag: ""
    pullPolicy: IfNotPresent

  imagePullSecrets:
    - name: accelleran-secret

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext: {}
    # fsGroup: 2000

  draxNodeSelectorEnabled: false
  draxNodeSelector:
    draxName: "{{ $.Values.global.draxNodeSelector.draxName }}"

  nodeSelector: {}

  tolerations: []

  affinity: {}


rr-ctrl:
  enabled: true

  nameOverride: "rr-ctrl"
  fullnameOverride: ""

  containerName: "rr-ctrl"

  replicaCount: null

  image:
    repository: accelleran/rrctrlappl
    tag: ""
    pullPolicy: IfNotPresent

  imagePullSecrets:
    - name: accelleran-secret

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext: {}
    # fsGroup: 2000

  draxNodeSelectorEnabled: false
  draxNodeSelector:
    draxName: "{{ $.Values.global.draxNodeSelector.draxName }}"

  nodeSelector: {}

  tolerations: []

  affinity: {}


ds-ctrl:
  enabled: true

  nameOverride: "ds-ctrl"
  fullnameOverride: ""

  containerName: "ds-ctrl"

  replicaCount: null

  image:
    repository: accelleran/dsctrlappl
    tag: ""
    pullPolicy: IfNotPresent

  imagePullSecrets:
    - name: accelleran-secret

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext: {}
    # fsGroup: 2000

  draxNodeSelectorEnabled: false
  draxNodeSelector:
    draxName: "{{ $.Values.global.draxNodeSelector.draxName }}"

  nodeSelector: {}

  tolerations: []

  affinity: {}
