# init kafka: kafkacat -b {{ $.Release.Name }}-kafka.{{ $.Release.Namespace }}:9092 -t test-topic -C -o beginning -e


global:
  # Kubernetes advertise IP
  #   Description:  Supply the Kubernetes Advertise address of your Kubernetes cluster.
  #                 This is used by some services that are exposed via a nodePort.
  #
  #   Value type:   string
  #
  kubeIp: "10.20.20.20"

  # dRAX Specific Node Selector
  #   Description:  This is a special nodeSelector field implemented for the
  #                 Accelleran RIC Helm charts. You need to first label your
  #                 node in Kubernetes with a label "draxName" and give it a
  #                 <value>. For example for node <node_name>, you can use the
  #                 following command to label it:
  #                 kubectl label node <node_name> draxName=<value>.
  #                 You can then enabled this feature by setting
  #                 "draxNodeSelectorEnabled" to "true" (as a string with quotes!).
  #                 The in "draxName" set the value of the label you chose for
  #                 the node. This will in effect install all the RIC Application
  #                 on that node, without the need to edit all individual helm
  #                 charts. In case you want to add other nodeSelector options,
  #                 you have to add them to the helm chart specific values files.
  #
  #   Value type:   string
  #
  draxNodeSelectorEnabled: "false"
  draxName: "main"

  # 4G/5G Options
  #   Description:  Depending on the product bought, you may enable or disable the accompanying features.
  #
  #   Value type:   bool
  #
  enable4G: true
  enable5G: false

  # Accelleran License
  #   Description:  In order to use the Accelleran products, you need to have a license from Accelleran.
  #                 Please contact Accelleran to get the license.
  #                 The license file should be saved as a Kubernetes secret. The name of the secret should be
  #                 supplied here under the "licenseSecretName" field.
  #                 To create the secret you can use the following command:
  #                 kubectl create secret generic accelleran-license --from-file=license.crt
  #
  # Value type:     enabled: string
  #                 licenseSecretName: string
  #
  accelleranLicense:
    enabled: "true"
    licenseSecretName: "accelleran-license"


dash-front-back-end:
  enabled: true
  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  service:
    # The internal port used by WebGUI, default is 5000
    port: 5000

    # The external nodePort used by the WebGUI, default is 31315
    nodePort: 31315

  initConfig:
    kafkaUrl: "{{ .Release.Name }}-kafka.{{ .Release.Namespace }}:9092"

  config:
    # AUTOGENERATED DONT EDIT
    config_id: "production"

    # The namespace where the L3 pod will be running
    defaultServiceNamespace: "default"

    # The namespace where the ORAN-CLUSTERCONTROLLER will be running
    defaultOranNamespace: "default"

    # AUTOGENERATED DONT EDIT
    grafanaURL: "{{ .Values.global.kubeIp }}"

    # The external nodePort used by Grafana, default is 30300
    grafanaPort: "30300"

    # AUTOGENERATED DONT EDIT
    nodeApiURL: "{{ .Values.global.kubeIp }}"
    nodePort: "31315"
    kafkaUrl: "{{ .Values.global.kubeIp }}"
    kafkaPort: "31090"
    svcOrchestratorHost: "service-orchestrator"
    svcOrchestratorPort: "80"
    networkStateMonitorHost: "{{ .Release.Name }}-network-state-monitor"
    networkStateMonitorPort: "5000"
    configApiHost: "config-api"
    configApiPort: "80"
    svcMonitorHost: "service-monitor"
    svcMonitorPort: "80"
    pcixAppPodName: "accelleran-drax-pci-010-pci-xapp-api"
    pcixAppPort: "80"
    ksqldbPodName: "{{ .Values.global.kubeIp }}"
    ksqldbPort: "30533"
    LteRadioControllerLabel: "4G-Radio-Controller"
    draxVersionConfigmap: "drax-version"

    # The IP that is set here must be globally available so that any browser can reach it, so that the front end can communicate to the backend. Preferable, use the publicly exposed IP that can reach the Kubernetes Advertise IP. If only a private Kubernetes Advertise IP is set here, the dRAX Dashbaord will only work when openning a browser on a computer that can reach the private Kuebrnetes Advertise IP.
    apiUrl: "{{ .Values.global.kubeIp }}"
    websocketPort: "31316"
    topologyExpired: 5000
    kafkaTopics:
      - "accelleran.drax.5g.ric.raw.cu_state"
      - "accelleran.drax.5g.ric.raw.ue_measurements"
      - "accelleran.drax.4g.ric.raw.network_state"
      - "accelleran.drax.all.ric.processed.anr"


service-monitor:
  # Enable/disable installation of the Service Monitor
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  monitoredNamespaces: "{{ .Release.Namespace }}"


service-orchestrator:
  # Enable/disable installation of the Service Orchestrator
  enabled: true

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  kubeIp: "{{ .Values.global.kubeIp }}"


config-api:
  enabled: true
  config:
    default_service_namespace_5g: "default"
    default_oran_namespace_4g: "default"
    service_monitor_host: "service-monitor"
    service_monitor_port: "80"


cell-wrapper:
  enabled: true
  global:
    tag: "nightly-2023-12-15"

  nats:
    enabled: false
  redis:
    enabled: false

e2t:
  enabled: false

  natsHostname: "{{ .Values.global.kubeIp }}"
  natsPort: "31100"

  redisConfig:
    hostname: "{{ .Values.global.kubeIp }}"
    port: "32200"

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  e2tsctp:
    enabled: true

  e2tap:
    enabled: true

    numOfE2Nodes: "5"

  e2smkpm:
    enabled: true

  e2smrc:
    enabled: true


golang-nkafka-5g:
  accelleranLicense:
    enabled: "{{ .Values.global.accelleranLicense.enabled }}"
    licenseSecretName: "{{ .Values.global.accelleranLicense.licenseSecretName }}"

  mode: "5g"

  image:
    repository: accelleran/golang-nkafka-5g
    pullPolicy: IfNotPresent
    tag: "1.3.3_R4.2.2_karmeliet_CW2.3.0-rc.0"

  initConfig:
    kafkaTopicsCheck: "accelleran.drax.5g.ric.raw.messages,accelleran.drax.5g.ric.raw.pm_counters,accelleran.drax.5g.ric.raw.ue_measurements,accelleran.drax.5g.ric.raw.cu_state,accelleran.drax.5g.ric.raw.ran_control_response"

  kafka:
    hostname: "{{ .Release.Name }}-kafka.{{ .Release.Namespace }}"
    port: 9092
  nats:
    hostname: "{{ .Release.Name }}-nats.{{ .Release.Namespace }}"
    port: 4222

  draxNodeSelectorEnabled: "{{ .Values.global.draxNodeSelectorEnabled }}"
  draxNodeSelector:
    draxName: "{{ .Values.global.draxName }}"

  config:
    natsConnectionParameters:
      connectTimeout: 5000
      maxReconnects: 120
      reconnectWait: 5000

    natsKafkaTopics:
      override: false
      # defaultKafkaTopic: "accelleran.drax.5g.ric.raw.messages"
      # translations:
      #   - natsSubject: "5G_CUUP_BEACON_INFO"
      #     kafkaTopic: "accelleran.drax.5g.ric.raw.cu_state"
      #   - natsSubject: "PM-REPORT-COUNTERS"
      #     kafkaTopic: "accelleran.drax.5g.ric.raw.pm_counters"
      #   ...


kafka:
  global:
    storageClass: ""

  nameOverride: ""
  fullnameOverride: ""

  clusterDomain: cluster.local

  extraEnvVars:
    - name: "KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE"
      value: "true"
    - name: "KAFKA_CREATE_TOPICS"
      value: "accelleran.drax.4g.ric.raw.network_state:1:1,accelleran.drax.4g.ric.raw.service_discovery:1:1,accelleran.drax.4g.ric.raw.ue_measurements:1:1,accelleran.drax.5g.ric.raw.cu_state:1:1,accelleran.drax.5g.ric.raw.ue_measurements:1:1,accelleran.drax.5g.ric.raw.pm_counters:1:1,accelleran.drax.5g.ric.raw.messages:1:1"

  listeners:
    client:
      name: CLIENT
      containerPort: 9092
      protocol: PLAINTEXT
    controller:
      name: CONTROLLER
      containerPort: 9093
      protocol: PLAINTEXT
    interbroker:
      name: INTERNAL
      containerPort: 9094
      protocol: PLAINTEXT
    external:
      name: EXTERNAL
      containerPort: 9095
      protocol: PLAINTEXT

  kraft:
    enabled: true

  controller:
    replicaCount: 1

  commonLabels: {}
  commonAnnotations: {}
  extraDeploy: []

  service:
    type: ClusterIP

    ports:
      client: 9092
    nodePorts:
      client: ""  # 31090


  volumePermissions:
    enabled: false

  # serviceAccount:
  #   create: true
  #   name: ""
  #   automountServiceAccountToken: true
  #   annotations: {}
  # rbac:
  #   create: false

  metrics:
    kafka:
      enabled: false

    jmx:
      enabled: true
      # kafkaJmxPort: 5555

      # containerPorts:
      #   metrics: 5556

      # service:
      #   ports:
      #     metrics: 5556

      # whitelistObjectNames:
      #   - kafka.controller:*
      #   - kafka.server:*
      #   - java.lang:*
      #   - kafka.network:*
      #   - kafka.log:*

      # config: |-
      #   jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:{{ .Values.metrics.jmx.kafkaJmxPort }}/jmxrmi
      #   lowercaseOutputName: true
      #   lowercaseOutputLabelNames: true
      #   ssl: false
      #   {{- if .Values.metrics.jmx.whitelistObjectNames }}
      #   whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
      #   {{- end }}

      # existingConfigmap: ""

      # ## extraRules: |-
      # ##  - pattern: kafka.server<type=socket-server-metrics, listener=(.+), networkProcessor=(.+)><>(connection-count)
      # ##    name: kafka_server_socket_server_metrics_$3
      # ##    labels:
      # ##      listener: $1
      # ##
      # extraRules: ""


nats:
  enabled: true

  natsBox:
    enabled: false

redis:
  enabled: true

  architecture: standalone
  auth:
    enabled: false






prometheus:
  enabled: false
  nodeSelector: {}

  alertmanager:
    enabled: false

  serviceAccounts:
    kubeStateMetrics:
      create: true
      name: null
    nodeExporter:
      create: true
      name: null
    pushgateway:
      create: true
      name: null
    server:
      create: true
      name: null

  # Retention policy on the Prometheus storage
  server:
    name: server
    persistentVolume:
      enabled: true
      storageClassName: ""
    statefulSet:
      enabled: true
      labels:
        drax/component-name: prometheus
        drax/role: ric

    podLabels:
      drax/component-name: prometheus-server
      drax/role: ric

    retention: 15d
    service:
      labels:
        drax/component-name: prometheus-server
        drax/role: ric
      type: NodePort
      nodePort: 30304

  extraScrapeConfigs: |
    - job_name: 5gPmCountersXapp
      scrape_interval: 2s
      static_configs:
        - targets:
          - "{{ .Values.global.kubeIp }}:30515"
    - job_name: kafkaMonitoringJmx
      static_configs:
        - targets:
          - "{{ .Release.Name }}-kafka.{{ .Release.Namespace }}:5556"
    - job_name: kafkaMonitoringKminion
      static_configs:
        - targets:
          - "{{ .Release.Name }}-acc-kminion:8080"
    - job_name: nats4GMonitoring
      static_configs:
        - targets:
          - "nats-service:7777"
    - job_name: nats5GMonitoring
      static_configs:
        - targets:
          - "{{ .Release.Name }}-nats:7777"

grafana:
  enabled: true
  nodeSelector: {}
  extraLabels:
    drax/role: ric
    drax/component-name: grafana

  persistence:
    type: pvc
    enabled: true
    storageClassName: ""

  service:
    enabled: true
    type: NodePort
    port: 80
    targetPort: 3000
    nodePort: 30300

  # Administrator credentials when not using an existing secret (see below)
  adminUser: accelleran
  adminPassword: accelleran

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - access: proxy
          isDefault: true
          name: Prometheus
          type: prometheus
          url: http://{{ .Release.Name }}-prometheus-server.{{ .Release.Namespace }}:80
          jsonData:
            timeInterval: 2s
        - access: proxy
          isDefault: false
          name: Loki
          type: loki
          url: http://{{ .Release.Name }}-loki.{{ .Release.Namespace }}:3100
        - access: proxy
          isDefault: false
          name: InfluxDB-4G
          type: influxdb
          url: http://{{ .Release.Name }}-influxdb.{{ .Release.Namespace }}:8086
          user: admin
          password: password
          database: db_4G
          basicAuth: true
          basicAuthUser: admin
          basicAuthPassword: password
        - access: proxy
          isDefault: false
          name: InfluxDB-5G
          type: influxdb
          url: http://{{ .Release.Name }}-influxdb.{{ .Release.Namespace }}:8086
          user: admin
          password: password
          database: db_5G
          basicAuth: true
          basicAuthUser: admin
          basicAuthPassword: password

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "4g-monitoring-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/4g-monitoring-dashboard
        - name: "custom-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/custom-dashboard
        - name: "loki-log-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/loki-log-dashboard
        - name: "5g-health-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-health-dashboard
        - name: "5g-monitoring-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-monitoring-dashboard
        - name: "5g-cucp-pm-counters"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-cucp-pm-counters
        - name: "5g-cuup-pm-counters"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-cuup-pm-counters
        - name: "kafka-cluster-monitoring"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/kafka-cluster-monitoring
        - name: "nats-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/nats-dashboard

  dashboardsConfigMaps:
    4g-monitoring-dashboard: grafana-4g-monitoring-dashboard
    custom-dashboard: grafana-custom-dashboard
    loki-log-dashboard: grafana-loki-log-dashboard
    5g-health-dashboard: grafana-5g-health-dashboard
    5g-monitoring-dashboard: grafana-5g-monitoring-dashboard
    5g-cucp-pm-counters: grafana-5g-cucp-pm-counters
    5g-cuup-pm-counters: grafana-5g-cuup-pm-counters
    kafka-cluster-monitoring: grafana-kafka-cluster-monitoring
    nats-dashboard: grafana-nats-dashboard

# coalesce.go:286: warning: cannot overwrite table with non table for loki-stack.prometheus.alertmanager.extraEnv (map[])
loki-stack:
  enabled: true
  promtail:
    enabled: false
  fluent-bit:
    enabled: true
    podLabels:
      drax/role: ric
      drax/component-name: fluent-bit

    serviceLabels:
      drax/role: ric
      drax/component-name: fluent-bit

    nodeSelector: {}
  loki:
    enabled: true
    podLabels:
      drax/role: ric
      drax/component-name: loki
    serviceLabels:
      drax/role: ric
      drax/component-name: loki
    nodeSelector: {}
    config:
      table_manager:
        # Retention polocy for logs in Loki
        retention_deletes_enabled: true
        # Must be a multiple of 168h
        retention_period: 672h

influxdb:
  # Enable/disable installation of InfluxDB
  labels:
    drax/role: ric
    drax/component-name: influxdb
  enabled: true
  persistence:
    storageClassName: ""
  nodeSelector: {}
  podLabels:
    drax/role: ric
    drax/component-name: influxdb
  service:
    type: NodePort
    nodePorts:
      http: 30303
  initScripts:
    enabled: true
    scripts:
      init_4g.iql: |+
        CREATE DATABASE "db_4G" WITH DURATION 5d REPLICATION 1 NAME "rp_5d_4G"
      init_5g.iql: |+
        CREATE DATABASE "db_5G" WITH DURATION 5d REPLICATION 1 NAME "rp_5d_5G"
  adminUser:
    organization: "accelleran"
    user: "admin"
    password: "password"
