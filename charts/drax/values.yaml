tags:
  logs: true
  notifications: true

global:
  # Kubernetes advertise IP
  #   Description:  Supply the Kubernetes Advertise address of your Kubernetes cluster.
  #                 This is used by some services that are exposed via a nodePort.
  #
  #   Value type:   string
  #
  kubeIp: "10.20.20.20"

  # 4G/5G Options
  #   Description:  Depending on the product bought, you may enable or disable the accompanying features.
  #
  #   Value type:   bool
  #
  enable4G: false
  enable5G: true

  # Accelleran License
  #   Description:  In order to use the Accelleran products, you need to have a license from Accelleran.
  #                 Please contact Accelleran to get the license.
  #                 The license file should be saved as a Kubernetes secret. The name of the secret should be
  #                 supplied here under the "secretName" field.
  #                 To create the secret you can use the following command:
  #                 kubectl create secret generic accelleran-license --from-file=license.crt
  #
  # Value type:     enabled: string
  #                 secretName: string
  #
  accelleranLicense:
    enabled: true
    secretName: "accelleran-license"

  nodeSelector: {}

bootstrap:
  create: true
  name: "{{ $.Release.Name }}-bootstrap"
  redis:
    enabled: true
    hostname: ""
    port: 0
  nats:
    enabled: true
    hostname: ""
    port: 0
  kafka:
    enabled: true
    hostname: ""
    port: 0


dashboard:
  enabled: true

  bootstrap:
    create: false
    name: "{{ $.Release.Name }}-bootstrap"

  secretRefs:
  - name: "LOKI_NOTIFICATIONS_BASIC_AUTH_PASSWORD"
    secretName: "{{ $.Release.Name }}-loki-gateway-auth"
    secretKey: "dashboard-notifications"

  config:
    # Defined for server config.json
    kafkaURL: "{{ $.Release.Name }}-kafka"
    networkStateMonitorHost: "{{ $.Release.Name }}-network-state-monitor"
    svcMonitorHost: "{{ $.Release.Name }}-service-monitor"
    svcOrchestratorHost: "{{ $.Release.Name }}-service-orchestrator"
    configApiHost: "{{ $.Release.Name }}-config-api"
    pcixAppPodName: "accelleran-drax-pci-010-pci-xapp-api"
    lokiHost: "{{ .Release.Name }}-loki-gateway.{{ .Release.Namespace }}"
    lokiPort: "80"
    ksqldbPodName: "{{ $.Values.global.kubeIp }}"
    nodeApiURL: "{{ $.Values.global.kubeIp }}"
    # Defined for core-ui config.js
    grafanaPort: "30300"
    # Defined for environment variable DRAX_VERSION
    draxVersionConfigmap: "{{ $.Release.Name }}-version"

  extraEnvs:
  - name: "LOKI_NOTIFICATIONS_BASIC_AUTH_USERNAME"
    value: "dashboard-notifications"

  service:
    type: NodePort
    ports:
      http:
        port: 5000
        nodePort: 31315

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      -
        # host: example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            port: http
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


network-state-monitor:
  # Enable/disable installation of the Network State Monitor
  enabled: true

  bootstrap:
    create: false
    name: "{{ $.Release.Name }}-bootstrap"

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    -
      # host: example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          port: http
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


service-monitor:
  # Enable/disable installation of the Service Monitor
  enabled: true

  monitoredNamespaces: "{{ .Release.Namespace }}"

  accelleranLicense:
    enabled: "{{ $.Values.global.accelleranLicense.enabled }}"
    secretName: "{{ $.Values.global.accelleranLicense.secretName }}"

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      -
        # host: example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            port: http
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


service-orchestrator:
  # Enable/disable installation of the Service Orchestrator
  enabled: true

  kubeIp: "{{ .Values.global.kubeIp }}"

  accelleranLicense:
    enabled: "{{ $.Values.global.accelleranLicense.enabled }}"
    secretName: "{{ $.Values.global.accelleranLicense.secretName }}"

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      -
        # host: example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            port: http
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


config-api:
  enabled: true

  config:
    default_service_namespace_5g: "default"
    default_oran_namespace_4g: "default"
    service_monitor_host: "{{ .Release.Name }}-service-monitor"
    service_monitor_port: "80"

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      -
        # host: example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            port: http
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


cell-wrapper:
  enabled: true

  bootstrap:
    create: false
    name: "{{ $.Release.Name }}-bootstrap"

  nats:
    enabled: false
  redis:
    enabled: false


du-metrics-server:
  enabled: true

  bootstrap:
    create: false
    name: "{{ $.Release.Name }}-bootstrap"

  du-metrics-server:
    config:
      kafkaPublishingEnabled: true
      topics:
        default: accelleran.drax.5g.du_metrics
        ue_kpis: accelleran.drax.5g.du_metrics.ue_mac
        rlc_tx_kpis: accelleran.drax.5g.du_metrics.ue_rlc_tx
        rlc_rx_kpis: accelleran.drax.5g.du_metrics.ue_rlc_rx

  influxdb:
    nameOverride: "du-influxdb"

    adminUser:
      organization: "accelleran"
      bucket: "default"
      retention_policy: "0s"
      user: "admin"
      password: ""
      token: ""
      existingSecret: drax-du-influxdb-auth

    persistence:
      enabled: true
      accessMode: ReadWriteOnce
      size: 2Gi

    service:
      annotations: {}
      labels: {}
      type: ClusterIP
      portName: http
      port: 80
      targetPort: 8086


telemetry-collector:
  enabled: true
  service:
    enabled: true
    name: ""
    type: ClusterIP
    ports:
      udp:
        port: 55555
        targetPort: 55555
        protocol: UDP

  influxdbAuthSecret: "drax-influxdb2-auth"

  config:
    internal:
      kafka:
        url: "{{ $.Release.Name }}-kafka.{{ $.Release.Namespace }}:9092"
      influxDB:
        url: "{{ $.Release.Name }}-influxdb2.{{ $.Release.Namespace }}:80"
        org: "accelleran"
    pipelines:
      - name: "cu_measurements"
        component: "cu"
        vendor: "accelleran"
        enabled: "true"
        consumers:
          natsConsumer:
            url: "{{ $.Release.Name }}-nats.{{ $.Release.Namespace }}:4222"
            subjects: "*.5G_MEAS_INFO.*.*.*.*"
        publishers:
          kafkaPublisher:
            topic: "accelleran.drax.5g.ric.o1.ves"
        influxPublisher:
          defaultBucket: "meas5g"
          buckets:
            RrcMeasurementReport: "rrc_measurements"
      - name: "pm_counters"
        component: "cu"
        vendor: "accelleran"
        enabled: "true"
        consumers:
          natsConsumer:
            url: "{{ $.Release.Name }}-nats.{{ $.Release.Namespace }}:4222"
            subjects: "*.CUCP_COUNTERS_INFO,*.CUUP_COUNTERS_INFO"
        publishers:
          kafkaPublisher:
            topic: "accelleran.drax.5g.ric.o1.ves"
          influxPublisher:
            defaultBucket: "counters5g"
            buckets:
              RRCConnEstabAtt: "rrc_connection_metrics"
              RRCConnEstabSucc: "rrc_connection_metrics"
              MMHoExeIntraReq: "handover_and_mobility_metrics"
              MMHoExeIntraSucc: "handover_and_mobility_metrics"
              RRCConnMean: "rrc_connection_metrics"
              RRCConnMax: "rrc_connection_metrics"
              SMPDUSessionSetupReq: "pdu_session_management_metrics"
              SMPDUSessionSetupReqSnssai: "pdu_session_management_metrics"
              SMPDUSessionSetupFail: "pdu_session_management_metrics"
              L1MSSRSRP: "rrc_measurements"
              MMHoPrepInterReq: "handover_and_mobility_metrics"
              MMHoPrepInterSucc: "handover_and_mobility_metrics"
              MMHoPrepInterFail: "handover_and_mobility_metrics"
              MMHoResAlloInterReq: "handover_and_mobility_metrics"
              MMHoResAlloInterSucc: "handover_and_mobility_metrics"
              MMHoResAlloInterFail: "handover_and_mobility_metrics"
              MMHoExeInterReq: "handover_and_mobility_metrics"
              AccDRBEstabAtt5QiSnssai: "radio_resource_utilization_metrics"
              DRBEstabSuccSnssai: "radio_resource_utilization_metrics"
              DRBEstabSucc5Qi: "radio_resource_utilization_metrics"
              DRBRelActNbr5QiSnssai: "radio_resource_utilization_metrics"
              DRBRelActNbrSnssai: "radio_resource_utilization_metrics"
              DRBRelActNbr5Qi: "radio_resource_utilization_metrics"
              MMHoExeInterReqTimeMean: "handover_and_mobility_metrics"
              MMHoExeInterReqTimeMax: "handover_and_mobility_metrics"
              AccGTPThpDl: "throughput_metrics"
              AccGTPThpDlQfiSnssaiPlmn: "throughput_metrics"
              AccGTPThpUl: "throughput_metrics"
              AccGTPThpUlQfiSnssaiPlmn: "throughput_metrics"
              AccDRBPdcpSduDelayDlQfiSnssaiPlmn: "radio_resource_utilization_metrics"
              AccDRBF1UPacketLossRateUlQoS: "radio_resource_utilization_metrics"
              AccDRBF1UPacketLossRateUlQfiSnssaiPlmn: "radio_resource_utilization_metrics"
              AccDRBF1UPacketLossRateUlSnssai: "radio_resource_utilization_metrics"
              AccDRBPdcpPacketDropRateDlQoS: "radio_resource_utilization_metrics"
              AccDRBPdcpPacketDropRateDlSnssai: "radio_resource_utilization_metrics"
              AccDRBPdcpPacketDropRateDlQfiSnssaiPlmn: "radio_resource_utilization_metrics"
              DRBPdcpSduDelayDlQoS: "radio_resource_utilization_metrics"
              DRBPdcpSduDelayDlSnssai: "radio_resource_utilization_metrics"
              DRBPdcpSduDelayDlDistQos: "radio_resource_utilization_metrics"
              DRBPdcpSduDelayDlDist: "radio_resource_utilization_metrics"
              DRBPdcpSduDelayDlDistSnssai: "radio_resource_utilization_metrics"
              AccDRBPdcpSduDelayDlDistQfiSnssaiPlmn: "radio_resource_utilization_metrics"
      - name: "acc_du"
        component: "du"
        vendor: "accelleran"
        enabled: "true"
        consumers:
          udpConsumer:
            port: "55555"
        publishers:
          kafkaPublisher:
            topic: "accelleran.drax.5g.ric.o1.ves"
          influxPublisher:
            defaultBucket: "acc_du"
            buckets:
              DUUEMeasurements: "du_ue_measurements"
              DURLCMeasurements: "du_rlc_measurements"


e2-t:
  enabled: true

  numOfE2Nodes: 2

  bootstrap:
    create: false
    name: "{{ $.Release.Name }}-bootstrap"


pm-counters:
  enabled: true

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      -
        # host: example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            port: http
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


golang-nkafka-5g:
  mode: "5g"

  bootstrap:
    create: false
    name: "{{ $.Release.Name }}-bootstrap"

  config:
    natsConnectionParameters:
      connectTimeout: 5000
      maxReconnects: 120
      reconnectWait: 5000

    natsKafkaTopics:
      override: false
      # defaultKafkaTopic: "accelleran.drax.5g.ric.raw.messages"
      # translations:
      #   - natsSubject: "5G_CUUP_BEACON_INFO"
      #     kafkaTopic: "accelleran.drax.5g.ric.raw.cu_state"
      #   - natsSubject: "PM-REPORT-COUNTERS"
      #     kafkaTopic: "accelleran.drax.5g.ric.raw.pm_counters"
      #   ...

  accelleranLicense:
    enabled: "{{ $.Values.global.accelleranLicense.enabled }}"
    secretName: "{{ $.Values.global.accelleranLicense.secretName }}"


kafka:
  enabled: true

  global:
    storageClass: ""

  nameOverride: ""
  fullnameOverride: ""

  clusterDomain: cluster.local

  extraEnvVars:
    - name: "KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE"
      value: "true"

  listeners:
    client:
      name: CLIENT
      containerPort: 9092
      protocol: PLAINTEXT
    controller:
      name: CONTROLLER
      containerPort: 9093
      protocol: PLAINTEXT
    interbroker:
      name: INTERNAL
      containerPort: 9094
      protocol: PLAINTEXT
    external:
      name: EXTERNAL
      containerPort: 9095
      protocol: PLAINTEXT

  kraft:
    enabled: true

  controller:
    replicaCount: 3
    automountServiceAccountToken: true
    nodeSelector: {}
    persistence:
      size: 1Gi
    resourcesPreset: medium

  broker:
    automountServiceAccountToken: true
    nodeSelector: {}
    persistence:
      size: 1Gi
    resourcesPreset: medium

  provisioning:
    enabled: true
    automountServiceAccountToken: true
    nodeSelector: {}
    replicationFactor: 1
    numPartitions: 1
    topics:
      - name: kafka-cluster-init
        partitions: 1
        replicationFactor: 1
      - name: accelleran.drax.5g.ric.o1.ves
        partitions: 1
        replicationFactor: 1

  service:
    type: NodePort

    ports:
      client: 9092
      external: 9095
    nodePorts:
      client: ""
      external: "31090"

  externalAccess:
    enabled: true
    controller:
      service:
        type: "NodePort"
        useHostIPs: true
    broker:
      service:
        type: "NodePort"
        useHostIPs: true
    autoDiscovery:
      enabled: true

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}
  rbac:
    create: true

  metrics:
    kafka:
      enabled: false
      automountServiceAccountToken: true
      nodeSelector: {}

    jmx:
      enabled: true
      service:
        ports:
          metrics: 5556


nats:
  enabled: true

  global:
    labels:
      drax/technology: 5g
      drax/component-name: nats

  natsBox:
    enabled: false

  promExporter:
    enabled: true
    port: 7777

  service:
    enabled: true
    name: ""

    ports:
      nats:
        enabled: true
      monitor:
        enabled: true
    merge:
      spec:
        type: NodePort
        ports:
          - name: nats
            port: 4222
            nodePort: 31100

  extraResources:
    - apiVersion: v1
      kind: Service
      metadata:
        name:
          $tplYaml: >
            {{ printf "%s-prom-exporter" (include "nats.fullname" $) | quote }}
      spec:
        selector:
          $tplYaml: |
            {{ include "nats.selectorLabels" $ }}
        ports:
          - protocol: TCP
            port: 7777
            targetPort: 7777


redis:
  enabled: true

  commonLabels:
    drax/technology: 5g
    drax/component-name: redis

  architecture: standalone
  auth:
    enabled: false

  master:
    nodeSelector: {}
    persistence:
      size: 1Gi
  replica:
    nodeSelector: {}


prometheus:
  enabled: true
  nodeSelector: {}

  alertmanager:
    enabled: false

  prometheus-node-exporter:
    enabled: true

  prometheus-pushgateway:
    nodeSelector: {}

  kube-state-metrics:
    nodeSelector: {}

  serviceAccounts:
    kubeStateMetrics:
      create: true
      name: null
    nodeExporter:
      create: true
      name: null
    pushgateway:
      create: true
      name: null
    server:
      create: true
      name: null

  # Retention policy on the Prometheus storage
  server:
    name: server
    persistentVolume:
      enabled: true
      storageClassName: ""
      size: 2Gi
    statefulSet:
      enabled: true
      labels:
        drax/component-name: prometheus
        drax/role: ric

    podLabels:
      drax/component-name: prometheus-server
      drax/role: ric

    retention: 15d
    service:
      labels:
        drax/component-name: prometheus-server
        drax/role: ric
      type: NodePort
      nodePort: 30304

  # adds additional scrape configs to prometheus.yml
  # must be a string so you have to add a | after extraScrapeConfigs:
  extraScrapeConfigs: |
    - job_name: 5gPmCountersXapp
      scrape_interval: 2s
      static_configs:
        - targets:
          - "{{ $.Release.Name }}-pm-counters.{{ $.Release.Namespace }}:8000"
    - job_name: kafkaMonitoringJmx
      static_configs:
        - targets:
          - "{{ $.Release.Name }}-kafka-jmx-metrics.{{ $.Release.Namespace }}:5556"
    - job_name: kafkaMonitoringKminion
      static_configs:
        - targets:
          - "{{ $.Release.Name }}-kminion.{{ $.Release.Namespace }}:8080"
    - job_name: natsMonitoring
      static_configs:
        - targets:
          - "{{ $.Release.Name }}-nats-prom-exporter.{{ $.Release.Namespace }}:7777"


grafana:
  enabled: true
  nodeSelector: {}
  extraLabels:
    drax/role: ric
    drax/component-name: grafana

  persistence:
    type: pvc
    enabled: true
    storageClassName: ""
    size: 1Gi

  service:
    enabled: true
    type: NodePort
    port: 80
    targetPort: 3000
    nodePort: 30300

  # Administrator credentials when not using an existing secret (see below)
  adminUser: accelleran
  adminPassword: accelleran

  grafana.ini:
    auth.basic:
      enabled: false
    auth.anonymous:
      enabled: true
      # Organization name that should be used for unauthenticated users
      org_name: Main Org.
      # Role for unauthenticated users, other valid values are `Editor` and `Admin`
      org_role: Viewer

  envValueFrom:
    DU_INFLUXDB_ADMIN_TOKEN:
      secretKeyRef:
        name: "drax-du-influxdb-auth"
        key: admin-token

    LOKI_LOGS_BASIC_AUTH_PASSWORD:
      secretKeyRef:
        name: "{{ $.Release.Name }}-loki-gateway-auth"
        key: grafana-logs

    LOKI_NOTIFICATIONS_BASIC_AUTH_PASSWORD:
      secretKeyRef:
        name: "{{ $.Release.Name }}-loki-gateway-auth"
        key: grafana-notifications

    INFLUXDB2_ADMIN_TOKEN:
      secretKeyRef:
        name: "drax-influxdb2-auth"
        key: admin-token

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - access: proxy
          isDefault: true
          name: Prometheus
          type: prometheus
          url: http://{{ .Release.Name }}-prometheus-server.{{ .Release.Namespace }}:80
          jsonData:
            timeInterval: 2s
        - access: proxy
          isDefault: false
          name: Loki-Logs
          type: loki
          url: http://{{ .Release.Name }}-loki-gateway.{{ .Release.Namespace }}:80
          uid: P8E80F9AEF21F6940
          basicAuth: true
          basicAuthUser: grafana-logs
          secureJsonData:
            basicAuthPassword: ${LOKI_LOGS_BASIC_AUTH_PASSWORD}
        - access: proxy
          isDefault: false
          name: Loki-Notifications
          type: loki
          url: http://{{ .Release.Name }}-loki-gateway.{{ .Release.Namespace }}:80
          basicAuth: true
          basicAuthUser: grafana-notifications
          secureJsonData:
            basicAuthPassword: ${LOKI_NOTIFICATIONS_BASIC_AUTH_PASSWORD}
        - access: proxy
          isDefault: false
          name: InfluxDB-4G
          type: influxdb
          url: http://{{ .Release.Name }}-influxdb.{{ .Release.Namespace }}:8086
          user: admin
          password: password
          database: db_4G
          basicAuth: true
          basicAuthUser: admin
          basicAuthPassword: password
        - access: proxy
          isDefault: false
          name: InfluxDB-5G
          type: influxdb
          url: http://{{ .Release.Name }}-influxdb.{{ .Release.Namespace }}:8086
          user: admin
          password: password
          database: db_5G
          basicAuth: true
          basicAuthUser: admin
          basicAuthPassword: password
        - name: InfluxDB-DU
          type: influxdb
          access: proxy
          url: "http://{{ $.Release.Name }}-du-influxdb.{{ $.Release.Namespace }}:80"
          uid: JOSE3g9KVz
          secureJsonData:
            token: ${DU_INFLUXDB_ADMIN_TOKEN}
          jsonData:
            version: Flux
            organization: accelleran
            defaultBucket: default
            tlsSkipVerify: true
        - name: InfluxDB2
          type: influxdb
          access: proxy
          url: "http://{{ $.Release.Name }}-influxdb2.{{ $.Release.Namespace }}:80"
          uid: ddswjfzs92bk0b
          secureJsonData:
            token: ${INFLUXDB2_ADMIN_TOKEN}
          jsonData:
            version: Flux
            organization: accelleran
            defaultBucket: default
            tlsSkipVerify: true

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        # - name: "4g-monitoring-dashboard"
        #   orgId: 1
        #   folder: ""
        #   type: file
        #   disableDeletion: false
        #   editable: true
        #   options:
        #     path: /var/lib/grafana/dashboards/4g-monitoring-dashboard
        # - name: "custom-dashboard"
        #   orgId: 1
        #   folder: ""
        #   type: file
        #   disableDeletion: false
        #   editable: true
        #   options:
        #     path: /var/lib/grafana/dashboards/custom-dashboard
        - name: "loki-log-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/loki-log-dashboard
        # - name: "5g-health-dashboard"
        #   orgId: 1
        #   folder: ""
        #   type: file
        #   disableDeletion: false
        #   editable: true
        #   options:
        #     path: /var/lib/grafana/dashboards/5g-health-dashboard
        - name: "5g-monitoring-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-monitoring-dashboard
        - name: "5g-cucp-pm-counters"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-cucp-pm-counters
        - name: "5g-cuup-pm-counters"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-cuup-pm-counters
        - name: "5g-du-metrics"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/5g-du-metrics
        - name: "kafka-cluster-monitoring"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/kafka-cluster-monitoring
        - name: "nats-dashboard"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/nats-dashboard

  dashboardsConfigMaps:
    # 4g-monitoring-dashboard: "{{ .Release.Name }}-grafana-4g-monitoring-dashboard"
    # custom-dashboard: "{{ .Release.Name }}-grafana-custom-dashboard"
    loki-log-dashboard: "{{ .Release.Name }}-grafana-loki-log-dashboard"
    # 5g-health-dashboard: "{{ .Release.Name }}-grafana-5g-health-dashboard"
    5g-monitoring-dashboard: "{{ .Release.Name }}-grafana-5g-monitoring-dashboard"
    5g-cucp-pm-counters: "{{ .Release.Name }}-grafana-5g-cucp-pm-counters"
    5g-cuup-pm-counters: "{{ .Release.Name }}-grafana-5g-cuup-pm-counters"
    5g-du-metrics: "{{ .Release.Name }}-grafana-5g-du-metrics"
    kafka-cluster-monitoring: "{{ .Release.Name }}-grafana-kafka-cluster-monitoring"
    nats-dashboard: "{{ .Release.Name }}-grafana-nats-dashboard"


loki-gateway:
  # enabled: true

  auth:
    enabled: true
    preventSecretUninstall: true
    users:
      - username: "promtail-logs"
        password: ""
        organization: "logs"
      - username: "grafana-logs"
        password: ""
        organization: "logs"
      - username: "promtail-notifications"
        password: ""
        organization: "notifications"
      - username: "grafana-notifications"
        password: ""
        organization: "notifications"
      - username: "dashboard-notifications"
        password: ""
        organization: "notifications"

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      -
        # host: example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
            port: http
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


loki:
  # enabled: true

  loki:
    overrideConfiguration:
      table_manager:
        retention_deletes_enabled: true
        retention_period: 672h  # 28d
      limits_config:
        max_query_lookback: 672h  # 28 days
        retention_period: 672h  # 28d
        max_entries_limit_per_query: 10000
      compactor:
        retention_enabled: true
        delete_request_store: s3
      runtime_config:
        file: "/runtime-config/tenants.yaml"

      schema_config:
        configs:
          - from: "2024-04-01"
            store: tsdb
            object_store: s3
            schema: v13
            index:
              prefix: loki_index_
              period: 24h
      ingester:
        chunk_encoding: snappy
      tracing:
        enabled: true
      querier:
        max_concurrent: 4

      common:
        storage:
          s3:
            endpoint: ${MINIO_ENDPOINT}
            bucketnames: chunks
            access_key_id: ${MINIO_ACCESS_KEY_ID}
            secret_access_key: ${MINIO_SECRET_ACCESS_KEY}
            s3forcepathstyle: true
            insecure: true

  compactor:
    replicaCount: 1
    updateStrategy:
      type: Recreate
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  indexGateway:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  distributor:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  ingester:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  querier:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  queryFrontend:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  queryScheduler:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  ruler:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  tableManager:
    resourcesPreset: "none"
    extraArgs:
    - -config.expand-env=true
    extraEnvVars:
      - name: MINIO_ENDPOINT
        value: "{{ $.Release.Name }}-minio.default.svc:9000"
      - name: MINIO_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootUser
      - name: MINIO_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: "{{ $.Release.Name }}-minio"
            key: rootPassword
    extraVolumes:
      - name: loki-tenants
        configMap:
          name: "{{ $.Release.Name }}-drax-loki-tenants"
    extraVolumeMounts:
      - name: loki-tenants
        mountPath: "/runtime-config"

  gateway:
    enabled: false
    resourcesPreset: "none"

  promtail:
    enabled: false
    resourcesPreset: "none"

  volumePermissions:
    resourcesPreset: "none"

  memcachedchunks:
    resourcesPreset: "none"
  memcachedfrontend:
    resourcesPreset: "none"
  memcachedindexqueries:
    resourcesPreset: "none"
  memcachedindexwrites:
    resourcesPreset: "none"


minio:
  # enabled: true

  replicas: 1
  # Minio requires 2 to 16 drives for erasure code (drivesPerNode * replicas)
  # https://docs.min.io/docs/minio-erasure-code-quickstart-guide
  # Since we only have 1 replica, that means 2 drives must be used.
  drivesPerNode: 2
  rootUser: ""
  rootPassword: ""
  buckets:
    - name: chunks
      policy: none
      purge: false
    - name: ruler
      policy: none
      purge: false
    - name: admin
      policy: none
      purge: false
  persistence:
    size: 5Gi
    annotations: {}
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  # Allow the address used by Loki to refer to Minio to be overridden
  address: null


promtail-logs:
  # enabled: true

  nameOverride: "promtail-logs"

  config:
    enabled: true
    clients:
      - url: http://{{ .Release.Name }}-loki-gateway.{{ .Release.Namespace }}:80/loki/api/v1/push
        tenant_id: logs
        basic_auth:
          username: promtail-logs
          password_file: /etc/promtail/secrets/password

  extraVolumeMounts:
    - name: loki-gateway-password
      mountPath: /etc/promtail/secrets

  extraVolumes:
    - name: loki-gateway-password
      secret:
        secretName: "{{ $.Release.Name }}-loki-gateway-auth"
        items:
          - key: promtail-logs
            path: password


promtail-notifications:
  # enabled: true

  nameOverride: "promtail-notifications"

  daemonset:
    enabled: false
  deployment:
    enabled: true

  config:
    enabled: true
    clients:
      - url: http://{{ .Release.Name }}-loki-gateway.{{ .Release.Namespace }}:80/loki/api/v1/push
        tenant_id: notifications
        basic_auth:
          username: promtail-notifications
          password_file: /etc/promtail/secrets/password
    snippets:
      scrapeConfigs: |
        - job_name: kafka-notifications
          kafka:
            brokers:
              - {{ .Release.Name }}-kafka.{{ .Release.Namespace }}:9092
            topics:
              - "accelleran.drax.5g.ric.o1.ves"
            use_incoming_timestamp: true
            labels:
              job: kafka-notifications
              app: {{ .Release.Name }}-promtail-notifications
          pipeline_stages:
            - json:
                expressions:
                  domain: event.commonEventHeader.domain
                  eventId: event.commonEventHeader.eventId
                  eventName: event.commonEventHeader.eventName
                  lastEpochMicrosec: event.commonEventHeader.lastEpochMicrosec
                  priority: event.commonEventHeader.priority
                  reportingEntityName: event.commonEventHeader.reportingEntityName
                  sequence: event.commonEventHeader.sequence
                  sourceName: event.commonEventHeader.sourceName
                  startEpochMicrosec: event.commonEventHeader.startEpochMicrosec
                  stndDefinedNamespace: event.commonEventHeader.stndDefinedNamespace
                  version: event.commonEventHeader.version
                  timeZoneOffset: event.commonEventHeader.timeZoneOffset
                  vesEventListenerVersion: event.commonEventHeader.vesEventListenerVersion
            - labels:
                domain:
                eventId:
                eventName:
                lastEpochMicrosec:
                priority:
                reportingEntityName:
                sequence:
                sourceName:
                startEpochMicrosec:
                stndDefinedNamespace:
                version:
                timeZoneOffset:
                vesEventListenerVersion:

  initContainer:
    - name: check-kafka
      # renovate:
      image: accelleran/acc-generic-img:0.8.1
      imagePullPolicy: IfNotPresent
      command:
      - /bin/sh
      - -c
      - |
        until kcat -b "${KAFKA_HOSTNAME}:${KAFKA_PORT}" -t kafka-cluster-init -C -o -1 -e
        do
          sleep 1
        done
        echo "$(date) Kafka ready"
      env:
      - name: KAFKA_HOSTNAME
        valueFrom:
          configMapKeyRef:
            key: KAFKA_HOSTNAME
            name: "{{ $.Release.Name }}-bootstrap"
      - name: KAFKA_PORT
        valueFrom:
          configMapKeyRef:
            key: KAFKA_PORT
            name: "{{ $.Release.Name }}-bootstrap"

  extraVolumeMounts:
    - name: loki-gateway-password
      mountPath: /etc/promtail/secrets

  extraVolumes:
    - name: loki-gateway-password
      secret:
        secretName: "{{ $.Release.Name }}-loki-gateway-auth"
        items:
          - key: promtail-notifications
            path: password


influxdb:
  # Enable/disable installation of InfluxDB
  enabled: true

  podLabels:
    drax/role: ric
    drax/component-name: influxdb

  nodeSelector: {}
  backup:
    nodeSelector: {}

  persistence:
    enabled: true
    # existingClaim: ""
    # storageClass: ""
    accessMode: ReadWriteOnce
    size: 2Gi

  service:
    type: NodePort
    nodePorts:
      http: "30303"

  setDefaultUser:
    enabled: true
    user:
      username: "admin"
      password: "password"

      ## The user name and password are obtained from an existing secret. The expected
      ## keys are `influxdb-user` and `influxdb-password`.
      ## If set, the username and password values above are ignored.
      # existingSecret: influxdb-auth

  initScripts:
    enabled: true
    scripts:
      init_4g.iql: |+
        CREATE DATABASE "db_4G" WITH DURATION 5d REPLICATION 1 NAME "rp_5d_4G"
      init_5g.iql: |+
        CREATE DATABASE "db_5G" WITH DURATION 5d REPLICATION 1 NAME "rp_5d_5G"


influxdb2:
  enabled: true

  podLabels:
    drax/role: ric
    drax/component-name: influxdb2

  adminUser:
    organization: "accelleran"
    bucket: "default"
    retention_policy: "0s"
    user: "admin"
    password: ""
    token: ""
    existingSecret: drax-influxdb2-auth

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 2Gi

  service:
    type: ClusterIP
    nodePorts:
      http: ""

  initScripts:
    enabled: true
    scripts:
      init.sh: |+
        #!/bin/bash
        influx bucket create -n rrc_measurements -o accelleran -r 1w
        influx bucket create -n rrc_connection_metrics -o accelleran -r 1w
        influx bucket create -n handover_and_mobility_metrics -o accelleran -r 1w
        influx bucket create -n pdu_session_management_metrics -o accelleran -r 1w
        influx bucket create -n radio_resource_utilization_metrics -o accelleran -r 1w
        influx bucket create -n throughput_metrics -o accelleran -r 1w
        influx bucket create -n du_ue_measurements -o accelleran -r 1w
        influx bucket create -n du_rlc_measurements -o accelleran -r 1w

vector:
  nameOverride: ""
  fullnameOverride: ""

  role: "Stateless-Aggregator"

  nodeSelector: {}

  image:
    repository: timberio/vector
    pullPolicy: IfNotPresent
    pullSecrets: []
    tag: ""
    sha: ""

  replicas: 1

  secrets:
    generic: {}
      # my_variable: "my-secret-value"
      # datadog_api_key: "api-key"
      # awsAccessKeyId: "access-key"
      # awsSecretAccessKey: "secret-access-key"

  command: []
  args:
    - --config-dir
    - "/etc/vector/"
  env: []
    # - name: VECTOR_LOG
    #   value: "info"
  envFrom: []

  config:
    influx:
      database: db_5G
      namespace: uemeasurement
      hostname: "{{ $.Release.Name }}-influxdb"
      port: 8086
      username: admin
      password: password
      type: influxdb_logs
    kafka:
      hostname: "{{ $.Release.Name }}-kafka"
      port: 9092
      topic: accelleran.drax.5g.ric.raw.ue_measurements
      pmCounterTopic: accelleran.drax.5g.ric.raw.pm_counters

  customConfig:
    sources:
      inUeMeas:
        type: "kafka"
        bootstrap_servers: "{{ tpl $.Values.config.kafka.hostname $ }}:{{ $.Values.config.kafka.port }}"
        group_id: "VECTOR_5G_UE_MEAS"
        topics: ["{{ tpl $.Values.config.kafka.topic $ }}"]

      inUeThroughput:
        type: "kafka"
        bootstrap_servers: "{{ tpl $.Values.config.kafka.hostname $ }}:{{ $.Values.config.kafka.port }}"
        group_id: "VECTOR_5G_UE_THROUGHPUT"
        topics: ["{{ tpl $.Values.config.kafka.pmCounterTopic $ }}"]

    transforms:
      parseJsonUeMeas:
        type: "remap"
        inputs: ["inUeMeas"]
        drop_on_error: true
        source: . |= object!(parse_json!(.message))
      filterUeMeas:
        type: "filter"
        inputs: ["parseJsonUeMeas"]
        condition: "exists(.RrcMeasurementReportResultInfo)"
      parseUeMeas:
        type: "remap"
        inputs: ["filterUeMeas"]
        drop_on_error: true
        source: . |= object!(.RrcMeasurementReportResultInfo)
      luaUeMeas:
        type: "lua"
        inputs: ["parseUeMeas"]
        version: '2'
        hooks:
          process: |-
            function (event, emit)
              m = {}
              m.log = {
                timestamp = os.date("!*t"),
                nrCellId = "",
                ueId = "",
                measurement = {}
              }

              if event.log.RrcMeasurementReportResultInfo.CellInfo ~= nil then
                for f, v in pairs(event.log.RrcMeasurementReportResultInfo.CellInfo) do
                  temp = m
                  temp.log.ueId = event.log.RrcMeasurementReportResultInfo.GnbCuCpUeId
                  temp.log.nrCellId = v.NeighbourCellInfo.NrCgi.NrCellId
                  temp.log.measurement.ssbRsrp = v.NeighbourCellInfo.SsbRsrpResult
                  temp.log.measurement.ssbRsrq = v.NeighbourCellInfo.SsbRsrqResult
                  temp.log.measurement.ssbSinr = v.NeighbourCellInfo.SsbSinrResult
                  emit(temp)
                end
              end

              temp = m
              temp.log.ueId = event.log.RrcMeasurementReportResultInfo.GnbCuCpUeId
              temp.log.nrCellId = event.log.ServingCellInfo.NrCgi.NrCellId
              temp.log.measurement.ssbRsrp = event.log.ServingCellInfo.SsbRsrpResult
              temp.log.measurement.ssbRsrq = event.log.ServingCellInfo.SsbRsrqResult
              temp.log.measurement.ssbSinr = event.log.ServingCellInfo.SsbSinrResult
              emit(temp)
            end

      parseJsonUeThroughput:
        type: "remap"
        inputs: ["inUeThroughput"]
        drop_on_error: true
        source: . |= object!(parse_json!(.message))
      filterUeThroughput:
        type: filter
        inputs: ["parseJsonUeThroughput"]
        condition: exists(.PmReportingCuupCounterData)
      parseUeThroughput:
        inputs: ["filterUeThroughput"]
        type: "remap"
        drop_on_error: true
        source: . |= object!(.PmReportingCuupCounterData)
      filterNatsTopicUeThroughput:
        type: filter
        inputs: ["parseUeThroughput"]
        condition: contains(to_string!(.topic), ".CUUP_COUNTERS_INFO")
      luaParseThr:
        type: lua
        inputs: ["filterNatsTopicUeThroughput"]
        version: '2'
        hooks:
          process: |-
            function (event, emit)
              m = {}
              m.log = {
                timestamp = os.date("!*t"),
                ueId = "",
                measurement = {}
              }

              if event.log.PmReportingCuupCounterData.CounterList ~= nil then
                if event.log.PmReportingCuupCounterData.CounterList.items ~= nil then
                  for k, v in pairs(event.log.PmReportingCuupCounterData.CounterList.items) do
                    temp = m
                    temp.log.ueId = event.log.PmReportingCuupCounterData.CounterList.items[k].InstanceId
                    temp.log.cuupId = event.log.topic:match("[^.]*")
                    if v.CounterId == "DL_GTP_THP" then
                      temp.log.measurement.dlGtpThroughput = 0.0
                      temp.log.measurement.dlGtpThroughput = event.log.PmReportingCuupCounterData.CounterList.items[k].ValueList.items["0"]._val / event.log.PmReportingCuupCounterData.CounterList.items[k].ValueList.items["0"]._key
                      emit(temp)
                    end

                    if v.CounterId == "UL_GTP_THP" then
                      temp.log.measurement.ulGtpThroughput = 0.0
                      temp.log.measurement.ulGtpThroughput = event.log.PmReportingCuupCounterData.CounterList.items[k].ValueList.items["0"]._val / event.log.PmReportingCuupCounterData.CounterList.items[k].ValueList.items["0"]._key
                      emit(temp)
                    end
                  end
                end
              end
            end

    sinks:
      outUeMeas:
        type: "{{ $.Values.config.influx.type }}"
        inputs: ["luaUeMeas"]
        bucket: "vector-bucket"
        database: "{{ $.Values.config.influx.database }}"
        endpoint: "http://{{ tpl $.Values.config.influx.hostname $ }}:{{ $.Values.config.influx.port }}"
        measurement: "{{ $.Values.config.influx.namespace }}.vector"
        tags: ["nrCellId", "ueId"]
        username: "{{ $.Values.config.influx.username }}"
        password: "{{ $.Values.config.influx.password }}"

      outUeThroughput:
        type: "{{ .Values.config.influx.type }}"
        inputs: ["luaParseThr"]
        bucket: "vector-bucket"
        database: "{{ .Values.config.influx.database }}"
        endpoint: "http://{{ tpl .Values.config.influx.hostname . }}:{{ .Values.config.influx.port}}"
        measurement: "{{ .Values.config.influx.namespace }}.vector"
        tags: ["cuupId", "ueId"]
        username: "{{ .Values.config.influx.username }}"
        password: "{{ .Values.config.influx.password }}"

  service:
    enabled: false
    type: "ClusterIP"
    loadBalancerIP: ""

  serviceHeadless:
    enabled: false


kminion:
  enabled: true

  nodeSelector: {}

  kminion:
    # See reference config: https://github.com/cloudhut/kminion/blob/master/docs/reference-config.yaml
    config:
      kafka:
        brokers:
          - "{{ $.Release.Name }}-kafka.{{ $.Release.Namespace }}:9092"
        clientId: "kminion"
        retryInitConnection: true

      minion:
        consumerGroups:
          enabled: true
          scrapeMode: offsetsTopic
          granularity: partition
          allowedGroups: ["*"]
          ignoredGroups: []
        topics:
          granularity: partition
          allowedTopics: []
          ignoredTopics: []
          infoMetric:
            configKeys: ["cleanup.policy"]
        logDirs:
          enabled: false

      exporter:
        namespace: "kminion"
        host: ""
        port: 8080

      logger:
        level: info

  tests:
    enabled: false

extraResources: []
