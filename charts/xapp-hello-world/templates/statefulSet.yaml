apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "xapp_core.fullname" . }}
  labels:
    {{- include "xapp_core.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "xapp_core.fullname" . }}-xapp-headless 
  selector:
    matchLabels:
      {{- include "xapp_core.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "xapp_core.labels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "xapp_core.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{ if or (.Values.xappEndpoints) (.Values.developerMode.enabled) }}
      initContainers:
        {{ if .Values.xappEndpoints }}
        {{ if .Values.xappEndpoints.REDIS_URL }}
        - name: check-redis
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
                until [ "$(timeout 10s redis-cli -u {{ tpl .Values.xappEndpoints.REDIS_URL . }} ping)" == "PONG" ]
                do
                  echo "$(date) Waiting for redis"
                  sleep 1
                done
                echo "$(date) Redis ready"
        {{ end }}
        {{ if .Values.xappFrameworkConfig.flushOnDeployment }}
        - name: flush-redis
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - "redis-cli -u {{ tpl .Values.xappEndpoints.REDIS_URL . }} FLUSHALL"
        {{ end }}
        {{ if .Values.xappEndpoints.KAFKA_URL }}
        - name: check-kafka
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          command:
            - "/bin/sh"
            - "-c"
            - |
                KAFKA_URL="{{ tpl .Values.xappEndpoints.KAFKA_URL . | trimPrefix "kafka://" }}"
                until kcat -b "$KAFKA_URL" -t kafka-cluster-init -C -o -1 -e
                do
                  echo "$(date) Waiting for kafka"
                  sleep 1
                done
                echo "$(date) Kafka ready"
        {{ end }}
        {{ if .Values.developerMode.enabled }}
        - name: copy-initial-files  
          securityContext:
            runAsUser: 0 
            runAsGroup: 0
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command:
            - "/bin/sh"
            - "-c"
            - |              
              if [ -z "$(ls -A /mnt/data/ 2>/dev/null)" ]; then
                echo "Copying initial files to persistent volume..."
                cp -r /home/xapp/xapp/* /mnt/data/                
              else
                echo "Files already exist, skipping copy."
              fi
              chown -R 1000:1000 /mnt/data/
              chmod -R 775 /mnt/data/
          volumeMounts:
            - name: {{ .Release.Name }}-data-storage
              mountPath: /mnt/data
        {{ end }}
        {{ end }}
      {{ end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{ if .Values.developerMode.enabled }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              sudo service ssh start
              echo 'xapp:{{ .Values.developerMode.devPassword }}' | sudo chpasswd
              git init /home/xapp/xapp/
              jq '.name = "{{ .Release.Name }}"' /home/xapp/xapp/core/xapp_metadata.json > temp.json && mv temp.json /home/xapp/xapp/core/xapp_metadata.json
              tail -f /dev/null
          {{ else }}
          command:
            - "python3"
            - "xapp_main.py"
          {{ end }}
          volumeMounts:
            - name: {{ include "xapp_core.fullname" . }}-xapp-config
              mountPath: /home/xapp/xapp/config/xapp_config.json
              subPath: "xapp_config.json"
            - name: {{ include "xapp_core.fullname" . }}-xapp-endpoints
              mountPath: /home/xapp/xapp/config/xapp_endpoints.json
              subPath: "xapp_endpoints.json"
            {{ if .Values.developerMode.enabled }}
            - name: {{ .Release.Name }}-data-storage
              mountPath: /home/xapp/xapp
            {{ end }}
          ports:
            - containerPort: {{ .Values.restService.port }}
            {{ if .Values.developerMode.enabled }}
            - containerPort: {{ .Values.sshService.port }}
            {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{- . | toYaml | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ include "xapp_core.fullname" . }}-xapp-config
          configMap:
            name: {{ include "xapp_core.fullname" . }}-xapp-config
        - name: {{ include "xapp_core.fullname" . }}-xapp-endpoints
          configMap:
            name: {{ include "xapp_core.fullname" . }}-xapp-endpoints

        {{ if .Values.developerMode.enabled }}
        - name: {{ .Release.Name }}-data-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-data-storage
        {{ end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-data-storage
    spec:
      accessModes:
        - {{ .Values.persistence.accessMode }}
      storageClassName: {{ .Values.persistence.storageClass}}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
