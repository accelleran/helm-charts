name: Helm Charts

on:
  push:
    branches:
      - main
      - releases/**
  pull_request:
  workflow_dispatch:

jobs:

  vars:
    name: Variables
    # This is a work-around to be able to properly use variables.
    # This job should be made a dependency in order to be able to use its outputs.
    runs-on: ubuntu-22.04
    outputs:
      is_main_branch: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
      is_release_branch: ${{ github.ref_type == 'branch' && startsWith(github.ref_name, 'releases/') }}
      is_pull_request: ${{ github.event_name == 'pull_request' }}
      target_branch: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || github.ref_name }}
      charts: ${{ steps.list-charts.outputs.charts }}
      charts_to_lint: ${{ steps.list-charts.outputs.charts_to_lint }}
      charts_to_test: ${{ steps.list-charts.outputs.charts_to_test }}
      app_charts: ${{ steps.list-charts.outputs.app_charts }}
      lib_charts: ${{ steps.list-charts.outputs.lib_charts }}
      lib_chart_names: ${{ steps.list-charts.outputs.lib_chart_names }}
      chart_names_to_ignore_for_test: ${{ steps.list-charts.outputs.chart_names_to_ignore_for_test }}
      # renovate: github_repository=metallb/metallb versioning=semver
      metallb_version: v0.14.5
      # renovate: github_repository=halkeye/helm-repo-html versioning=semver
      helm_repo_html_version: v0.2.1
    timeout-minutes: 1
    steps:
      - name: Expose variables
        run: echo "Exposing variables for proper usage"

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: List charts
        id: list-charts
        run: |
          echo "charts=$(./bin/list-charts -p)" >> $GITHUB_OUTPUT
          echo "charts_to_lint=$(./bin/list-charts -p)" >> $GITHUB_OUTPUT
          echo "charts_to_test=$(./bin/list-charts -t -p)" >> $GITHUB_OUTPUT
          echo "app_charts=$(./bin/list-charts -a -p)" >> $GITHUB_OUTPUT
          echo "lib_charts=$(./bin/list-charts -l -p)" >> $GITHUB_OUTPUT
          echo "lib_chart_names=$(./bin/list-charts -l -n)" >> $GITHUB_OUTPUT
          echo "chart_names_to_ignore_for_test=$(./bin/list-charts -i -n)" >> $GITHUB_OUTPUT

  lint-charts:
    name: Lint Charts
    needs:
      - vars
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: ${{ needs.vars.outputs.is_pull_request == 'true' && '0' || '1' }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Add helm repositories
        run: ./bin/add-repos

      - name: List changed
        id: list-changed
        run: |
          changed_charts="${{ needs.vars.outputs.charts_to_lint }}"
          if [ "${{ needs.vars.outputs.is_pull_request }}" == "true" ]; then
            changed_charts="$(ct list-changed --config etc/ct.yaml --target-branch ${{ needs.vars.outputs.target_branch }})"
          fi

          if [[ -n "${changed_charts}" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare library charts
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        run: |
          lib_charts="${{ needs.vars.outputs.lib_charts }}"
          for lc in ${lib_charts//,/ } ; do
              # Add values.yaml file so the linter doesn't complain
              echo "${lc}/values.yaml"
              touch "${lc}/values.yaml"
          done

      - name: Lint charts
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        run: >-
          ct
          lint
          --config etc/ct.yaml
          ${{
            needs.vars.outputs.is_pull_request == 'true' && (
              format('--target-branch "{0}"', needs.vars.outputs.target_branch)
            ) || (
              format('--charts "{0}"', needs.vars.outputs.charts_to_lint)
            )
          }}

  test-charts:
    name: Test Charts
    needs:
      - vars
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: ${{ needs.vars.outputs.is_pull_request == 'true' && '0' || '1' }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Add helm repositories
        run: ./bin/add-repos

      - name: List changed
        id: list-changed
        run: |
          changed_charts="${{ needs.vars.outputs.charts_to_test }}"
          if [ "${{ needs.vars.outputs.is_pull_request }}" == "true" ]; then
            changed_charts="$( \
              ct list-changed \
                --config etc/ct.yaml \
                --target-branch ${{ needs.vars.outputs.target_branch }} \
                ${{ (needs.vars.outputs.lib_chart_names && format('--excluded-charts "{0}"', needs.vars.outputs.lib_chart_names)) }} \
                ${{ (needs.vars.outputs.chart_names_to_ignore_for_test && format('--excluded-charts "{0}"', needs.vars.outputs.chart_names_to_ignore_for_test)) }} \
            )"
          fi

          if [[ -n "${changed_charts}" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create kind cluster
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        uses: helm/kind-action@v1.10.0

      - name: Install metallb for loadbalancer services
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        run: |
          kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/${{ needs.vars.outputs.metallb_version }}/config/manifests/metallb-native.yaml

          kubectl wait --namespace metallb-system \
            --for=condition=ready pod \
            --selector=app=metallb \
            --timeout=90s

          subnets=$(docker network inspect -f '{{range .IPAM.Config}}{{printf "%s\n" .Subnet}}{{end}}' kind)
          printf "subnets:\n%s\n" "${subnets}"
          ipv4_subnets=$(echo "$subnets" | grep -E '(([0-9]{1,3})\.){3}([0-9]{1,3})\/([0-9]|[1-2][0-9]|3[0-2])')
          printf "ipv4_subnets:\n%s\n" "${ipv4_subnets}"
          subnet=$(echo "$ipv4_subnets" | head -n 1)
          printf "subnet: '%s'\n" "${subnet}"

          net_ip=$(echo "$subnet" | cut -d/ -f1)
          printf "net_ip: '%s'\n" "${net_ip}"
          cidr=$(echo "$subnet" | cut -d/ -f2)
          printf "cidr: '%s'\n" "${cidr}"
          if [ $cidr -gt 24 ]; then
            echo "CIDR of $subnet needs to be 24 or smaller" 1>&2
            exit 1
          fi

          net_ip_prefix=$(echo $net_ip | cut -d. -f 1-3)
          ip_range=$net_ip_prefix.200-$net_ip_prefix.250
          printf "ip_range: '%s'\n" "${ip_range}"

          cat <<EOF | kubectl apply -f -
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: example
            namespace: metallb-system
          spec:
            addresses:
            - $ip_range
          ---
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: empty
            namespace: metallb-system
          EOF

      - name: Create accelleran pull secret
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        run: >-
          kubectl create secret docker-registry
          --namespace default
          accelleran-secret
          --docker-username=${{ secrets.DOCKER_LOGIN }}
          --docker-password=${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Create accelleran license
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        run: |-
          cat <<EOF > license.crt
          ${{ secrets.ACCELLERAN_LICENSE }}
          EOF

          kubectl create secret generic \
          --namespace default \
          accelleran-license \
          --from-file=license.crt

      - name: Test charts
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        run: >-
          ct
          install
          --namespace default
          --config etc/ct.yaml
          ${{
            needs.vars.outputs.is_pull_request == 'true' && (
              format('--target-branch "{0}" --excluded-charts "{1}" --excluded-charts "{2}"',
                needs.vars.outputs.target_branch,
                needs.vars.outputs.lib_chart_names,
                needs.vars.outputs.chart_names_to_ignore_for_test
              )
            ) || (
              format('--charts "{0}"', needs.vars.outputs.charts_to_test)
            )
          }}
          --helm-extra-set-args "--set=kafka.provisioning.useHelmHooks=false"

  release-charts:
    name: Release Charts
    if: ${{ needs.vars.outputs.is_main_branch == 'true' || needs.vars.outputs.is_release_branch == 'true' }}
    needs:
      - vars
      - lint-charts
      - test-charts
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Set git user
        uses: git-actions/set-user@v1

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0
        
      - name: Install helm repo html plugin
        if: ${{ needs.vars.outputs.is_main_branch == 'true' }}
        run: helm plugin install https://github.com/halkeye/helm-repo-html --version ${{ needs.vars.outputs.helm_repo_html_version }}

      - name: Add helm repositories
        run: ./bin/add-repos

      - name: Run chart releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          config: etc/cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Generate repo html index
        if: ${{ needs.vars.outputs.is_main_branch == 'true' }}
        run: |-
          git checkout gh-pages
          git pull # pull index.yaml commit from chart releaser
          helm repo-html
          if ! git diff --exit-code index.html > /dev/null 2>&1 ; then
            git add index.html
            git commit -s -m "Update index.html"
            git push
          fi
          git checkout -

  release-please:
    name: Release
    if: ${{ needs.vars.outputs.is_main_branch == 'true' || needs.vars.outputs.is_release_branch == 'true' }}
    # Run after release-charts so that the tag exists in case of release commits.
    # Otherwise release please will create a new PR
    # as it doesn't yet have the release to compare changes with.
    needs:
      - vars
      - release-charts
    permissions:
      contents: write
      pull-requests: write
    uses: ./.github/workflows/release-please.yaml
